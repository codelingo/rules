--- 
tenets: 
  - 
    actions: 
      codelingo/docs: 
        body: |
            Do not store Contexts inside a struct type. Instead, pass them explicitly
            in functions. The one exception is for methods whose signature must match 
            an interface in the standard library or in a third party library.
            For more information, please see the godocs (https://github.com/golang/go/wiki/CodeReviewComments#contexts).
            
            ## Bad code
            ```golang
            // File contains a filename
            type File struct {
              filename string
              ctx      context.Context
            }
            
            func readfile (file: *File) {
              ...
            }
            ```
            
            ## Good code
            ```golang
            // File contains a filename 
            type File struct {
              filename string
            }
            
            func readfile (ctx content.Context, file: *File) {
              ...
            }
            ```
        title: "Do Not Store Context in Struct"
      codelingo/review: 
        comment: "Don't add a Context member to a `struct` type; instead add a ctx parameter to each method on that type that needs to pass it along. From [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments#contexts)."
    name: context-in-struct
    query: |
        import codelingo/ast/go
        
        go.struct_type(depth = any):
          go.field_list:
            go.field:
              go.names
              @review comment
              go.selector_expr:
                go.ident:
                  # It's unnecessary to confirm that this refers to the actual context package, as any similarly named package should conform to the same requirements
                  name == "context"
                go.ident:
                  name == "Context"
