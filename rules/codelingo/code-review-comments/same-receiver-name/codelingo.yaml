funcs:
  - name: notEqual
    type: asserter
    body: |
      function(name1, name2) {
        return name1 != name2
      }

tenets:
  - name:  same-receiver-name
    actions:
      codelingo/docs:
        title: Consistent Use Of Receiver Name
        body: |
          The name of a method's receiver should be a reflection of its identity; 
          often a one or two letter abbreviation of its type suffices (such as "c" or "cl" 
          for "Client"). Don't use generic names such as `this`. The name does not need to be as
          descriptive as that of a method argument, as its role is obvious and serves 
          no documentary purpose. Be consistent: if you call the receiver "c" in one 
          method, don't call it "cl" in another.

          ## Bad code
          ```golang
          type Database struct {
            Host string
            Port int
            User string
          }
          // DatabaseRoot returns the database's host and port information
          func (d Database) DatabaseRoot() {
            return d.Host + ":" + db.port
          }
          // User returns the database's user information
          func (data Database) User() {
            return data.User
          }
          ```

          ## Good code
          ```golang
          type Database struct {
            Host string
            Port int
            User string
          }
          // DatabaseRoot returns the database's host and port information
          func (d Database) DatabaseRoot() {
            return d.Host + ":" + db.port
          }
          // User returns the database's user information
          func (d Database) User() {
            return d.User
          }
          ```
      codelingo/review:
        comment: If you call the receiver `{{receiverName1}}` in `{{methodName1}}` method, don't call 
        it `{{receiverName2}}` in `{{methodName2}}` method. Be consistent. From [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments#receiver-names).
    query: |
      import codelingo/ast/go
      go.dir(depth = any):
        go.func_decl(depth = any):
          go.field_list:
            go.field:
              go.names:
                go.ident:
                  name as receiverName1
              any_of:
                go.ident:
                  name as typeName
                go.star_expr:
                  go.ident:
                    name as typeName
          go.ident:
            name as methodName1
        go.func_decl(depth = any):       
          go.field_list:
            go.field:
              go.names:
                go.ident:
                  name as receiverName2
                  notEqual(receiverName1, receiverName2)
              any_of:
                go.ident:
                  name == typeName
                go.star_expr:
                  go.ident:
                    name == typeName
              
          @review comment
          go.ident:
            name as methodName2
            notEqual(methodName1, methodName2)
